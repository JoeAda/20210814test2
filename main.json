{"README.md":"","main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"typescript_statement\" editable=\"false\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"namespace motor {\" line1=\"    const PCA9685_ADDRESS = 0x40\" line2=\"    const MODE1 = 0x00\" line3=\"    const MODE2 = 0x01\" line4=\"    const SUBADR1 = 0x02\" line5=\"    const SUBADR2 = 0x03\" line6=\"    const SUBADR3 = 0x04\" line7=\"    const PRESCALE = 0xFE\" line8=\"    const LED0_ON_L = 0x06\" line9=\"    const LED0_ON_H = 0x07\" line10=\"    const LED0_OFF_L = 0x08\" line11=\"    const LED0_OFF_H = 0x09\" line12=\"    const ALL_LED_ON_L = 0xFA\" line13=\"    const ALL_LED_ON_H = 0xFB\" line14=\"    const ALL_LED_OFF_L = 0xFC\" line15=\"    const ALL_LED_OFF_H = 0xFD\" line16=\"\" line17=\"    const STP_CHA_L = 2047\" line18=\"    const STP_CHA_H = 4095\" line19=\"\" line20=\"    const STP_CHB_L = 1\" line21=\"    const STP_CHB_H = 2047\" line22=\"\" line23=\"    const STP_CHC_L = 1023\" line24=\"    const STP_CHC_H = 3071\" line25=\"\" line26=\"    const STP_CHD_L = 3071\" line27=\"    const STP_CHD_H = 1023\" line28=\"\" line29=\"\" line30=\"    const BYG_CHA_L = 3071\" line31=\"    const BYG_CHA_H = 1023\" line32=\"\" line33=\"    const BYG_CHB_L = 1023\" line34=\"    const BYG_CHB_H = 3071\" line35=\"\" line36=\"    const BYG_CHC_L = 4095\" line37=\"    const BYG_CHC_H = 2047\" line38=\"\" line39=\"    const BYG_CHD_L = 2047\" line40=\"    const BYG_CHD_H = 4095\" line41=\"\" line42=\"    /**\" line43=\"     * The user can choose the step motor model.\" line44=\"     */\" line45=\"    export enum Stepper {\" line46=\"        //% block=&quot;42&quot;\" line47=\"        Ste1 = 1,\" line48=\"        //% block=&quot;28&quot;\" line49=\"        Ste2 = 2\" line50=\"    }\" line51=\"\" line52=\"    /**\" line53=\"     * The user can select the 8 steering gear controller.\" line54=\"     */\" line55=\"    export enum Servos {\" line56=\"        S1 = 0x08,\" line57=\"        S2 = 0x07,\" line58=\"        S3 = 0x06,\" line59=\"        S4 = 0x05,\" line60=\"        S5 = 0x04,\" line61=\"        S6 = 0x03,\" line62=\"        S7 = 0x02,\" line63=\"        S8 = 0x01\" line64=\"    }\" line65=\"\" line66=\"    /**\" line67=\"     * The user selects the 4-way dc motor.\" line68=\"     */\" line69=\"    export enum Motors {\" line70=\"        M1 = 0x1,\" line71=\"        M2 = 0x2,\" line72=\"        M3 = 0x3,\" line73=\"        M4 = 0x4\" line74=\"    }\" line75=\"\" line76=\"    /**\" line77=\"     * The user defines the motor rotation direction.\" line78=\"     */\" line79=\"    export enum Dir {\" line80=\"        //% blockId=&quot;CW&quot; block=&quot;CW&quot;\" line81=\"        CW = 1,\" line82=\"        //% blockId=&quot;CCW&quot; block=&quot;CCW&quot;\" line83=\"        CCW = -1,\" line84=\"    }\" line85=\"\" line86=\"    /**\" line87=\"     * The user can select a two-path stepper motor controller.\" line88=\"     */\" line89=\"    export enum Steppers {\" line90=\"        M1_M2 = 0x1,\" line91=\"        M3_M4 = 0x2\" line92=\"    }\" line93=\"\" line94=\"\" line95=\"\" line96=\"    let initialized = false\" line97=\"\" line98=\"    function i2cWrite(addr: number, reg: number, value: number) {\" line99=\"        let buf = pins.createBuffer(2)\" line100=\"        buf[0] = reg\" line101=\"        buf[1] = value\" line102=\"        pins.i2cWriteBuffer(addr, buf)\" line103=\"    }\" line104=\"\" line105=\"    function i2cCmd(addr: number, value: number) {\" line106=\"        let buf2 = pins.createBuffer(1)\" line107=\"        buf2[0] = value\" line108=\"        pins.i2cWriteBuffer(addr, buf2)\" line109=\"    }\" line110=\"\" line111=\"    function i2cRead(addr: number, reg: number) {\" line112=\"        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\" line113=\"        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\" line114=\"        return val;\" line115=\"    }\" line116=\"\" line117=\"    function initPCA9685(): void {\" line118=\"        i2cWrite(PCA9685_ADDRESS, MODE1, 0x00)\" line119=\"        setFreq(50);\" line120=\"        initialized = true\" line121=\"    }\" line122=\"\" line123=\"    function setFreq(freq: number): void {\" line124=\"        // Constrain the frequency\" line125=\"        let prescaleval = 25000000;\" line126=\"        prescaleval /= 4096;\" line127=\"        prescaleval /= freq;\" line128=\"        prescaleval -= 1;\" line129=\"        let prescale = prescaleval;//Math.floor(prescaleval + 0.5);\" line130=\"        let oldmode = i2cRead(PCA9685_ADDRESS, MODE1);\" line131=\"        let newmode = (oldmode &amp; 0x7F) | 0x10; // sleep\" line132=\"        i2cWrite(PCA9685_ADDRESS, MODE1, newmode); // go to sleep\" line133=\"        i2cWrite(PCA9685_ADDRESS, PRESCALE, prescale); // set the prescaler\" line134=\"        i2cWrite(PCA9685_ADDRESS, MODE1, oldmode);\" line135=\"        control.waitMicros(5000);\" line136=\"        i2cWrite(PCA9685_ADDRESS, MODE1, oldmode | 0xa1);\" line137=\"    }\" line138=\"\" line139=\"    function setPwm(channel: number, on: number, off: number): void {\" line140=\"        if (channel &lt; 0 || channel &gt; 15)\" line141=\"            return;\" line142=\"\" line143=\"        let buf3 = pins.createBuffer(5);\" line144=\"        buf3[0] = LED0_ON_L + 4 * channel;\" line145=\"        buf3[1] = on &amp; 0xff;\" line146=\"        buf3[2] = (on &gt;&gt; 8) &amp; 0xff;\" line147=\"        buf3[3] = off &amp; 0xff;\" line148=\"        buf3[4] = (off &gt;&gt; 8) &amp; 0xff;\" line149=\"        pins.i2cWriteBuffer(PCA9685_ADDRESS, buf3);\" line150=\"    }\" line151=\"\" line152=\"\" line153=\"    function setStepper_28(index: number, dir: boolean): void {\" line154=\"        if (index == 1) {\" line155=\"            if (dir) {\" line156=\"                setPwm(4, STP_CHA_L, STP_CHA_H);\" line157=\"                setPwm(6, STP_CHB_L, STP_CHB_H);\" line158=\"                setPwm(5, STP_CHC_L, STP_CHC_H);\" line159=\"                setPwm(7, STP_CHD_L, STP_CHD_H);\" line160=\"            } else {\" line161=\"                setPwm(7, STP_CHA_L, STP_CHA_H);\" line162=\"                setPwm(5, STP_CHB_L, STP_CHB_H);\" line163=\"                setPwm(6, STP_CHC_L, STP_CHC_H);\" line164=\"                setPwm(4, STP_CHD_L, STP_CHD_H);\" line165=\"            }\" line166=\"        } else {\" line167=\"            if (dir) {\" line168=\"                setPwm(0, STP_CHA_L, STP_CHA_H);\" line169=\"                setPwm(2, STP_CHB_L, STP_CHB_H);\" line170=\"                setPwm(1, STP_CHC_L, STP_CHC_H);\" line171=\"                setPwm(3, STP_CHD_L, STP_CHD_H);\" line172=\"            } else {\" line173=\"                setPwm(3, STP_CHA_L, STP_CHA_H);\" line174=\"                setPwm(1, STP_CHB_L, STP_CHB_H);\" line175=\"                setPwm(2, STP_CHC_L, STP_CHC_H);\" line176=\"                setPwm(0, STP_CHD_L, STP_CHD_H);\" line177=\"            }\" line178=\"        }\" line179=\"    }\" line180=\"\" line181=\"\" line182=\"    function setStepper_42(index: number, dir: boolean): void {\" line183=\"        if (index == 1) {\" line184=\"            if (dir) {\" line185=\"                setPwm(7, BYG_CHA_L, BYG_CHA_H);\" line186=\"                setPwm(6, BYG_CHB_L, BYG_CHB_H);\" line187=\"                setPwm(5, BYG_CHC_L, BYG_CHC_H);\" line188=\"                setPwm(4, BYG_CHD_L, BYG_CHD_H);\" line189=\"            } else {\" line190=\"                setPwm(7, BYG_CHC_L, BYG_CHC_H);\" line191=\"                setPwm(6, BYG_CHD_L, BYG_CHD_H);\" line192=\"                setPwm(5, BYG_CHA_L, BYG_CHA_H);\" line193=\"                setPwm(4, BYG_CHB_L, BYG_CHB_H);\" line194=\"            }\" line195=\"        } else {\" line196=\"            if (dir) {\" line197=\"                setPwm(3, BYG_CHA_L, BYG_CHA_H);\" line198=\"                setPwm(2, BYG_CHB_L, BYG_CHB_H);\" line199=\"                setPwm(1, BYG_CHC_L, BYG_CHC_H);\" line200=\"                setPwm(0, BYG_CHD_L, BYG_CHD_H);\" line201=\"            } else {\" line202=\"                setPwm(3, BYG_CHC_L, BYG_CHC_H);\" line203=\"                setPwm(2, BYG_CHD_L, BYG_CHD_H);\" line204=\"                setPwm(1, BYG_CHA_L, BYG_CHA_H);\" line205=\"                setPwm(0, BYG_CHB_L, BYG_CHB_H);\" line206=\"            }\" line207=\"        }\" line208=\"    }\" line209=\"\" line210=\"\" line211=\"    /**\" line212=\"&#9; * Steering gear control function.\" line213=\"     * S1~S8.\" line214=\"     * 0°~180°.\" line215=\"&#9;*/\" line216=\"    //% blockId=motor_servo block=&quot;Servo|%index|degree|%degree&quot;\" line217=\"    //% weight=100\" line218=\"    //% degree.min=0 degree.max=180\" line219=\"    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=4\" line220=\"    export function servo(index: Servos, degree: number): void {\" line221=\"        if (!initialized) {\" line222=\"            initPCA9685()\" line223=\"        }\" line224=\"        // 50hz\" line225=\"        let v_us = (degree * 1800 / 180 + 600) // 0.6ms ~ 2.4ms\" line226=\"        let value = v_us * 4096 / 20000\" line227=\"        setPwm(index + 7, 0, value)\" line228=\"    }\" line229=\"\" line230=\"    /**\" line231=\"&#9; * Execute a motor\" line232=\"     * M1~M4.\" line233=\"     * speed(0~255).\" line234=\"    */\" line235=\"    //% weight=90\" line236=\"    //% blockId=motor_MotorRun block=&quot;Motor|%index|dir|%Dir|speed|%speed&quot;\" line237=\"    //% speed.min=0 speed.max=255\" line238=\"    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2\" line239=\"    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=2\" line240=\"    export function MotorRun(index: Motors, direction: Dir, speed: number): void {\" line241=\"        if (!initialized) {\" line242=\"            initPCA9685()\" line243=\"        }\" line244=\"        speed = speed * 16 * direction; // map 255 to 4096\" line245=\"        if (speed &gt;= 4096) {\" line246=\"            speed = 4095\" line247=\"        }\" line248=\"        if (speed &lt;= -4096) {\" line249=\"            speed = -4095\" line250=\"        }\" line251=\"        if (index &gt; 4 || index &lt;= 0)\" line252=\"            return\" line253=\"        let pn = (4 - index) * 2\" line254=\"        let pp = (4 - index) * 2 + 1\" line255=\"        if (speed &gt;= 0) {\" line256=\"            setPwm(pp, 0, speed)\" line257=\"            setPwm(pn, 0, 0)\" line258=\"        } else {\" line259=\"            setPwm(pp, 0, 0)\" line260=\"            setPwm(pn, 0, -speed)\" line261=\"        }\" line262=\"    }\" line263=\"\" line264=\"    /**\" line265=\"&#9; * Execute a 42BYGH1861A-C step motor(Degree).\" line266=\"     * M1_M2/M3_M4.\" line267=\"    */\" line268=\"    //% weight=80\" line269=\"    //% blockId=motor_stepperDegree_42 block=&quot;Stepper 42|%index|dir|%direction|degree|%degree&quot;\" line270=\"    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2\" line271=\"    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=2\" line272=\"    export function stepperDegree_42(index: Steppers, direction: Dir, degree: number): void {\" line273=\"        if (!initialized) {\" line274=\"            initPCA9685()\" line275=\"        }\" line276=\"        // let Degree = Math.abs(degree);\" line277=\"        // Degree = Degree * direction;\" line278=\"        //setFreq(100);\" line279=\"        setStepper_42(index, direction &gt; 0);\" line280=\"        if (degree == 0) {\" line281=\"            return;\" line282=\"        }\" line283=\"        let Degree = Math.abs(degree);\" line284=\"        basic.pause((50000 * Degree) / (360 * 100));  //100hz\" line285=\"        if (index == 1) {\" line286=\"            motorStop(1)\" line287=\"            motorStop(2)\" line288=\"        } else {\" line289=\"            motorStop(3)\" line290=\"            motorStop(4)\" line291=\"        }\" line292=\"        //setFreq(50);\" line293=\"    }\" line294=\"\" line295=\"    /**\" line296=\"&#9; * Execute a 42BYGH1861A-C step motor(Turn).\" line297=\"     * M1_M2/M3_M4.\" line298=\"    */\" line299=\"    //% weight=70\" line300=\"    //% blockId=motor_stepperTurn_42 block=&quot;Stepper 42|%index|dir|%direction|turn|%turn&quot;\" line301=\"    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2\" line302=\"    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=2\" line303=\"    export function stepperTurn_42(index: Steppers, direction: Dir, turn: number): void {\" line304=\"        if (turn == 0) {\" line305=\"            return;\" line306=\"        }\" line307=\"        let degree = turn * 360;\" line308=\"        stepperDegree_42(index, direction, degree);\" line309=\"    }\" line310=\"\" line311=\"    /**\" line312=\"&#9; * Execute a 28BYJ-48 step motor(Degree).\" line313=\"     * M1_M2/M3_M4.\" line314=\"    */\" line315=\"    //% weight=60\" line316=\"    //% blockId=motor_stepperDegree_28 block=&quot;Stepper 28|%index|dir|%direction|degree|%degree&quot;\" line317=\"    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2\" line318=\"    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=2\" line319=\"    export function stepperDegree_28(index: Steppers, direction: Dir, degree: number): void {\" line320=\"        if (!initialized) {\" line321=\"            initPCA9685()\" line322=\"        }\" line323=\"        if (degree == 0) {\" line324=\"            return;\" line325=\"        }\" line326=\"        let Degree2 = Math.abs(degree);\" line327=\"        Degree2 = Degree2 * direction;\" line328=\"        //setFreq(100);\" line329=\"        setStepper_28(index, Degree2 &gt; 0);\" line330=\"        Degree2 = Math.abs(Degree2);\" line331=\"        basic.pause((1000 * Degree2) / 360);\" line332=\"        if (index == 1) {\" line333=\"            motorStop(1)\" line334=\"            motorStop(2)\" line335=\"        } else {\" line336=\"            motorStop(3)\" line337=\"            motorStop(4)\" line338=\"        }\" line339=\"        //setFreq(50);\" line340=\"    }\" line341=\"\" line342=\"    /**\" line343=\"&#9; * Execute a 28BYJ-48 step motor(Turn).\" line344=\"     * M1_M2/M3_M4.\" line345=\"    */\" line346=\"    //% weight=50\" line347=\"    //% blockId=motor_stepperTurn_28 block=&quot;Stepper 28|%index|dir|%direction|turn|%turn&quot;\" line348=\"    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2\" line349=\"    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=2\" line350=\"    export function stepperTurn_28(index: Steppers, direction: Dir, turn: number): void {\" line351=\"        if (turn == 0) {\" line352=\"            return;\" line353=\"        }\" line354=\"        let degree2 = turn * 360;\" line355=\"        stepperDegree_28(index, direction, degree2);\" line356=\"    }\" line357=\"\" line358=\"    /**\" line359=\"&#9; * Two parallel stepper motors are executed simultaneously(DegreeDual).\" line360=\"    */\" line361=\"    //% weight=40\" line362=\"    //% blockId=motor_stepperDegreeDual_42 block=&quot;Dual Stepper %stepper|M1_M2 dir %direction1|degree %degree1|M3_M4 dir %direction2|degree %degree2&quot;\" line363=\"    //% stepper.fieldEditor=&quot;gridpicker&quot; stepper.fieldOptions.columns=2\" line364=\"    //% direction1.fieldEditor=&quot;gridpicker&quot; direction1.fieldOptions.columns=2\" line365=\"    //% direction2.fieldEditor=&quot;gridpicker&quot; direction2.fieldOptions.columns=2\" line366=\"    export function stepperDegreeDual_42(stepper: Stepper, direction1: Dir, degree1: number, direction2: Dir, degree2: number): void {\" line367=\"        if (!initialized) {\" line368=\"            initPCA9685()\" line369=\"        }\" line370=\"        let timeout1 = 0;\" line371=\"        let timeout2 = 0;\" line372=\"        let Degree1 = Math.abs(degree1);\" line373=\"        let Degree22 = Math.abs(degree2);\" line374=\"\" line375=\"        if (stepper == 1) {  // 42 stepper\" line376=\"            if (Degree1 == 0 &amp;&amp; Degree22 == 0) {\" line377=\"                setStepper_42(0x01, direction1 &gt; 0);\" line378=\"                setStepper_42(0x02, direction2 &gt; 0);\" line379=\"            } else if ((Degree1 == 0) &amp;&amp; (Degree22 &gt; 0)) {\" line380=\"                timeout1 = (50000 * Degree22) / (360 * 100)\" line381=\"                setStepper_42(0x01, direction1 &gt; 0);\" line382=\"                setStepper_42(0x02, direction2 &gt; 0);\" line383=\"                basic.pause(timeout1);\" line384=\"                motorStop(3); motorStop(4);\" line385=\"            } else if ((Degree22 == 0) &amp;&amp; (Degree1 &gt; 0)) {\" line386=\"                timeout1 = (50000 * Degree1) / (360 * 100)\" line387=\"                setStepper_42(0x01, direction1 &gt; 0);\" line388=\"                setStepper_42(0x02, direction2 &gt; 0);\" line389=\"                basic.pause(timeout1);\" line390=\"                motorStop(1); motorStop(2);\" line391=\"            } else if ((Degree22 &gt; Degree1)) {\" line392=\"                timeout1 = (50000 * Degree1) / (360 * 100)\" line393=\"                timeout2 = (50000 * (Degree22 - Degree1)) / (360 * 100)\" line394=\"                setStepper_42(0x01, direction1 &gt; 0);\" line395=\"                setStepper_42(0x02, direction2 &gt; 0);\" line396=\"                basic.pause(timeout1);\" line397=\"                motorStop(1); motorStop(2);\" line398=\"                basic.pause(timeout2);\" line399=\"                motorStop(3); motorStop(4);\" line400=\"            } else if ((Degree22 &lt; Degree1)) {\" line401=\"                timeout1 = (50000 * Degree22) / (360 * 100)\" line402=\"                timeout2 = (50000 * (Degree1 - Degree22)) / (360 * 100)\" line403=\"                setStepper_42(0x01, direction1 &gt; 0);\" line404=\"                setStepper_42(0x02, direction2 &gt; 0);\" line405=\"                basic.pause(timeout1);\" line406=\"                motorStop(3); motorStop(4);\" line407=\"                basic.pause(timeout2);\" line408=\"                motorStop(1); motorStop(2);\" line409=\"            }\" line410=\"        } else if (stepper == 2) {\" line411=\"            if (Degree1 == 0 &amp;&amp; Degree22 == 0) {\" line412=\"                setStepper_28(0x01, direction1 &gt; 0);\" line413=\"                setStepper_28(0x02, direction2 &gt; 0);\" line414=\"            } else if ((Degree1 == 0) &amp;&amp; (Degree22 &gt; 0)) {\" line415=\"                timeout1 = (50000 * Degree22) / (360 * 100)\" line416=\"                setStepper_28(0x01, direction1 &gt; 0);\" line417=\"                setStepper_28(0x02, direction2 &gt; 0);\" line418=\"                basic.pause(timeout1);\" line419=\"                motorStop(3); motorStop(4);\" line420=\"            } else if ((Degree22 == 0) &amp;&amp; (Degree1 &gt; 0)) {\" line421=\"                timeout1 = (50000 * Degree1) / (360 * 100)\" line422=\"                setStepper_28(0x01, direction1 &gt; 0);\" line423=\"                setStepper_28(0x02, direction2 &gt; 0);\" line424=\"                basic.pause(timeout1);\" line425=\"                motorStop(1); motorStop(2);\" line426=\"            } else if ((Degree22 &gt; Degree1)) {\" line427=\"                timeout1 = (50000 * Degree1) / (360 * 100)\" line428=\"                timeout2 = (50000 * (Degree22 - Degree1)) / (360 * 100)\" line429=\"                setStepper_28(0x01, direction1 &gt; 0);\" line430=\"                setStepper_28(0x02, direction2 &gt; 0);\" line431=\"                basic.pause(timeout1);\" line432=\"                motorStop(1); motorStop(2);\" line433=\"                basic.pause(timeout2);\" line434=\"                motorStop(3); motorStop(4);\" line435=\"            } else if ((Degree22 &lt; Degree1)) {\" line436=\"                timeout1 = (50000 * Degree22) / (360 * 100)\" line437=\"                timeout2 = (50000 * (Degree1 - Degree22)) / (360 * 100)\" line438=\"                setStepper_28(0x01, direction1 &gt; 0);\" line439=\"                setStepper_28(0x02, direction2 &gt; 0);\" line440=\"                basic.pause(timeout1);\" line441=\"                motorStop(3); motorStop(4);\" line442=\"                basic.pause(timeout2);\" line443=\"                motorStop(1); motorStop(2);\" line444=\"            }\" line445=\"        } else {\" line446=\"            //\" line447=\"        }\" line448=\"    }\" line449=\"\" line450=\"    /**\" line451=\"&#9; * Two parallel stepper motors are executed simultaneously(Turn).\" line452=\"    */\" line453=\"    //% weight=30\" line454=\"    //% blockId=motor_stepperTurnDual_42 block=&quot;Dual Stepper %stepper|M1_M2 dir %direction1|trun %trun1|M3_M4 dir %direction2|trun %trun2&quot;\" line455=\"    //% stepper.fieldEditor=&quot;gridpicker&quot; stepper.fieldOptions.columns=2\" line456=\"    //% direction1.fieldEditor=&quot;gridpicker&quot; direction1.fieldOptions.columns=2\" line457=\"    //% direction2.fieldEditor=&quot;gridpicker&quot; direction2.fieldOptions.columns=2\" line458=\"    export function stepperTurnDual_42(stepper: Stepper, direction1: Dir, trun1: number, direction2: Dir, trun2: number): void {\" line459=\"        if ((trun1 == 0) &amp;&amp; (trun2 == 0)) {\" line460=\"            return;\" line461=\"        }\" line462=\"        let degree1 = trun1 * 360;\" line463=\"        let degree22 = trun2 * 360;\" line464=\"\" line465=\"        if (stepper == 1) {\" line466=\"            stepperDegreeDual_42(stepper, direction1, degree1, direction2, degree22);\" line467=\"        } else if (stepper == 2) {\" line468=\"            stepperDegreeDual_42(stepper, direction1, degree1, direction2, degree22);\" line469=\"        } else {\" line470=\"\" line471=\"        }\" line472=\"\" line473=\"    }\" line474=\"\" line475=\"    /**\" line476=\"&#9; * Stop the dc motor.\" line477=\"    */\" line478=\"    //% weight=20\" line479=\"    //% blockId=motor_motorStop block=&quot;Motor stop|%index&quot;\" line480=\"    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2 \" line481=\"    export function motorStop(index: Motors) {\" line482=\"        setPwm((4 - index) * 2, 0, 0);\" line483=\"        setPwm((4 - index) * 2 + 1, 0, 0);\" line484=\"    }\" line485=\"\" line486=\"    /**\" line487=\"&#9; * Stop all motors\" line488=\"    */\" line489=\"    //% weight=10\" line490=\"    //% blockId=motor_motorStopAll block=&quot;Motor Stop All&quot;\" line491=\"    export function motorStopAll(): void {\" line492=\"        for (let idx = 1; idx &lt;= 4; idx++) {\" line493=\"            motorStop(idx);\" line494=\"        }\" line495=\"    }\" line496=\"}\" numlines=\"497\"></mutation><next><block type=\"device_show_leds\"><field name=\"LEDS\">`\n        # # # # . \n        . . . . . \n        . . . . . \n        . . . . . \n        . . . . .\n        `</field></block></next></block></statement></block></xml>","main.ts":"namespace motor {\n    const PCA9685_ADDRESS = 0x40\n    const MODE1 = 0x00\n    const MODE2 = 0x01\n    const SUBADR1 = 0x02\n    const SUBADR2 = 0x03\n    const SUBADR3 = 0x04\n    const PRESCALE = 0xFE\n    const LED0_ON_L = 0x06\n    const LED0_ON_H = 0x07\n    const LED0_OFF_L = 0x08\n    const LED0_OFF_H = 0x09\n    const ALL_LED_ON_L = 0xFA\n    const ALL_LED_ON_H = 0xFB\n    const ALL_LED_OFF_L = 0xFC\n    const ALL_LED_OFF_H = 0xFD\n\n    const STP_CHA_L = 2047\n    const STP_CHA_H = 4095\n\n    const STP_CHB_L = 1\n    const STP_CHB_H = 2047\n\n    const STP_CHC_L = 1023\n    const STP_CHC_H = 3071\n\n    const STP_CHD_L = 3071\n    const STP_CHD_H = 1023\n\n\n    const BYG_CHA_L = 3071\n    const BYG_CHA_H = 1023\n\n    const BYG_CHB_L = 1023\n    const BYG_CHB_H = 3071\n\n    const BYG_CHC_L = 4095\n    const BYG_CHC_H = 2047\n\n    const BYG_CHD_L = 2047\n    const BYG_CHD_H = 4095\n\n    /**\n     * The user can choose the step motor model.\n     */\n    export enum Stepper {\n        //% block=\"42\"\n        Ste1 = 1,\n        //% block=\"28\"\n        Ste2 = 2\n    }\n\n    /**\n     * The user can select the 8 steering gear controller.\n     */\n    export enum Servos {\n        S1 = 0x08,\n        S2 = 0x07,\n        S3 = 0x06,\n        S4 = 0x05,\n        S5 = 0x04,\n        S6 = 0x03,\n        S7 = 0x02,\n        S8 = 0x01\n    }\n\n    /**\n     * The user selects the 4-way dc motor.\n     */\n    export enum Motors {\n        M1 = 0x1,\n        M2 = 0x2,\n        M3 = 0x3,\n        M4 = 0x4\n    }\n\n    /**\n     * The user defines the motor rotation direction.\n     */\n    export enum Dir {\n        //% blockId=\"CW\" block=\"CW\"\n        CW = 1,\n        //% blockId=\"CCW\" block=\"CCW\"\n        CCW = -1,\n    }\n\n    /**\n     * The user can select a two-path stepper motor controller.\n     */\n    export enum Steppers {\n        M1_M2 = 0x1,\n        M3_M4 = 0x2\n    }\n\n\n\n    let initialized = false\n\n    function i2cWrite(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n\n    function i2cCmd(addr: number, value: number) {\n        let buf2 = pins.createBuffer(1)\n        buf2[0] = value\n        pins.i2cWriteBuffer(addr, buf2)\n    }\n\n    function i2cRead(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n\n    function initPCA9685(): void {\n        i2cWrite(PCA9685_ADDRESS, MODE1, 0x00)\n        setFreq(50);\n        initialized = true\n    }\n\n    function setFreq(freq: number): void {\n        // Constrain the frequency\n        let prescaleval = 25000000;\n        prescaleval /= 4096;\n        prescaleval /= freq;\n        prescaleval -= 1;\n        let prescale = prescaleval;//Math.floor(prescaleval + 0.5);\n        let oldmode = i2cRead(PCA9685_ADDRESS, MODE1);\n        let newmode = (oldmode & 0x7F) | 0x10; // sleep\n        i2cWrite(PCA9685_ADDRESS, MODE1, newmode); // go to sleep\n        i2cWrite(PCA9685_ADDRESS, PRESCALE, prescale); // set the prescaler\n        i2cWrite(PCA9685_ADDRESS, MODE1, oldmode);\n        control.waitMicros(5000);\n        i2cWrite(PCA9685_ADDRESS, MODE1, oldmode | 0xa1);\n    }\n\n    function setPwm(channel: number, on: number, off: number): void {\n        if (channel < 0 || channel > 15)\n            return;\n\n        let buf3 = pins.createBuffer(5);\n        buf3[0] = LED0_ON_L + 4 * channel;\n        buf3[1] = on & 0xff;\n        buf3[2] = (on >> 8) & 0xff;\n        buf3[3] = off & 0xff;\n        buf3[4] = (off >> 8) & 0xff;\n        pins.i2cWriteBuffer(PCA9685_ADDRESS, buf3);\n    }\n\n\n    function setStepper_28(index: number, dir: boolean): void {\n        if (index == 1) {\n            if (dir) {\n                setPwm(4, STP_CHA_L, STP_CHA_H);\n                setPwm(6, STP_CHB_L, STP_CHB_H);\n                setPwm(5, STP_CHC_L, STP_CHC_H);\n                setPwm(7, STP_CHD_L, STP_CHD_H);\n            } else {\n                setPwm(7, STP_CHA_L, STP_CHA_H);\n                setPwm(5, STP_CHB_L, STP_CHB_H);\n                setPwm(6, STP_CHC_L, STP_CHC_H);\n                setPwm(4, STP_CHD_L, STP_CHD_H);\n            }\n        } else {\n            if (dir) {\n                setPwm(0, STP_CHA_L, STP_CHA_H);\n                setPwm(2, STP_CHB_L, STP_CHB_H);\n                setPwm(1, STP_CHC_L, STP_CHC_H);\n                setPwm(3, STP_CHD_L, STP_CHD_H);\n            } else {\n                setPwm(3, STP_CHA_L, STP_CHA_H);\n                setPwm(1, STP_CHB_L, STP_CHB_H);\n                setPwm(2, STP_CHC_L, STP_CHC_H);\n                setPwm(0, STP_CHD_L, STP_CHD_H);\n            }\n        }\n    }\n\n\n    function setStepper_42(index: number, dir: boolean): void {\n        if (index == 1) {\n            if (dir) {\n                setPwm(7, BYG_CHA_L, BYG_CHA_H);\n                setPwm(6, BYG_CHB_L, BYG_CHB_H);\n                setPwm(5, BYG_CHC_L, BYG_CHC_H);\n                setPwm(4, BYG_CHD_L, BYG_CHD_H);\n            } else {\n                setPwm(7, BYG_CHC_L, BYG_CHC_H);\n                setPwm(6, BYG_CHD_L, BYG_CHD_H);\n                setPwm(5, BYG_CHA_L, BYG_CHA_H);\n                setPwm(4, BYG_CHB_L, BYG_CHB_H);\n            }\n        } else {\n            if (dir) {\n                setPwm(3, BYG_CHA_L, BYG_CHA_H);\n                setPwm(2, BYG_CHB_L, BYG_CHB_H);\n                setPwm(1, BYG_CHC_L, BYG_CHC_H);\n                setPwm(0, BYG_CHD_L, BYG_CHD_H);\n            } else {\n                setPwm(3, BYG_CHC_L, BYG_CHC_H);\n                setPwm(2, BYG_CHD_L, BYG_CHD_H);\n                setPwm(1, BYG_CHA_L, BYG_CHA_H);\n                setPwm(0, BYG_CHB_L, BYG_CHB_H);\n            }\n        }\n    }\n\n\n    /**\n\t * Steering gear control function.\n     * S1~S8.\n     * 0°~180°.\n\t*/\n    //% blockId=motor_servo block=\"Servo|%index|degree|%degree\"\n    //% weight=100\n    //% degree.min=0 degree.max=180\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=4\n    export function servo(index: Servos, degree: number): void {\n        if (!initialized) {\n            initPCA9685()\n        }\n        // 50hz\n        let v_us = (degree * 1800 / 180 + 600) // 0.6ms ~ 2.4ms\n        let value = v_us * 4096 / 20000\n        setPwm(index + 7, 0, value)\n    }\n\n    /**\n\t * Execute a motor\n     * M1~M4.\n     * speed(0~255).\n    */\n    //% weight=90\n    //% blockId=motor_MotorRun block=\"Motor|%index|dir|%Dir|speed|%speed\"\n    //% speed.min=0 speed.max=255\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    export function MotorRun(index: Motors, direction: Dir, speed: number): void {\n        if (!initialized) {\n            initPCA9685()\n        }\n        speed = speed * 16 * direction; // map 255 to 4096\n        if (speed >= 4096) {\n            speed = 4095\n        }\n        if (speed <= -4096) {\n            speed = -4095\n        }\n        if (index > 4 || index <= 0)\n            return\n        let pn = (4 - index) * 2\n        let pp = (4 - index) * 2 + 1\n        if (speed >= 0) {\n            setPwm(pp, 0, speed)\n            setPwm(pn, 0, 0)\n        } else {\n            setPwm(pp, 0, 0)\n            setPwm(pn, 0, -speed)\n        }\n    }\n\n    /**\n\t * Execute a 42BYGH1861A-C step motor(Degree).\n     * M1_M2/M3_M4.\n    */\n    //% weight=80\n    //% blockId=motor_stepperDegree_42 block=\"Stepper 42|%index|dir|%direction|degree|%degree\"\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    export function stepperDegree_42(index: Steppers, direction: Dir, degree: number): void {\n        if (!initialized) {\n            initPCA9685()\n        }\n        // let Degree = Math.abs(degree);\n        // Degree = Degree * direction;\n        //setFreq(100);\n        setStepper_42(index, direction > 0);\n        if (degree == 0) {\n            return;\n        }\n        let Degree = Math.abs(degree);\n        basic.pause((50000 * Degree) / (360 * 100));  //100hz\n        if (index == 1) {\n            motorStop(1)\n            motorStop(2)\n        } else {\n            motorStop(3)\n            motorStop(4)\n        }\n        //setFreq(50);\n    }\n\n    /**\n\t * Execute a 42BYGH1861A-C step motor(Turn).\n     * M1_M2/M3_M4.\n    */\n    //% weight=70\n    //% blockId=motor_stepperTurn_42 block=\"Stepper 42|%index|dir|%direction|turn|%turn\"\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    export function stepperTurn_42(index: Steppers, direction: Dir, turn: number): void {\n        if (turn == 0) {\n            return;\n        }\n        let degree = turn * 360;\n        stepperDegree_42(index, direction, degree);\n    }\n\n    /**\n\t * Execute a 28BYJ-48 step motor(Degree).\n     * M1_M2/M3_M4.\n    */\n    //% weight=60\n    //% blockId=motor_stepperDegree_28 block=\"Stepper 28|%index|dir|%direction|degree|%degree\"\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    export function stepperDegree_28(index: Steppers, direction: Dir, degree: number): void {\n        if (!initialized) {\n            initPCA9685()\n        }\n        if (degree == 0) {\n            return;\n        }\n        let Degree2 = Math.abs(degree);\n        Degree2 = Degree2 * direction;\n        //setFreq(100);\n        setStepper_28(index, Degree2 > 0);\n        Degree2 = Math.abs(Degree2);\n        basic.pause((1000 * Degree2) / 360);\n        if (index == 1) {\n            motorStop(1)\n            motorStop(2)\n        } else {\n            motorStop(3)\n            motorStop(4)\n        }\n        //setFreq(50);\n    }\n\n    /**\n\t * Execute a 28BYJ-48 step motor(Turn).\n     * M1_M2/M3_M4.\n    */\n    //% weight=50\n    //% blockId=motor_stepperTurn_28 block=\"Stepper 28|%index|dir|%direction|turn|%turn\"\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2\n    //% direction.fieldEditor=\"gridpicker\" direction.fieldOptions.columns=2\n    export function stepperTurn_28(index: Steppers, direction: Dir, turn: number): void {\n        if (turn == 0) {\n            return;\n        }\n        let degree2 = turn * 360;\n        stepperDegree_28(index, direction, degree2);\n    }\n\n    /**\n\t * Two parallel stepper motors are executed simultaneously(DegreeDual).\n    */\n    //% weight=40\n    //% blockId=motor_stepperDegreeDual_42 block=\"Dual Stepper %stepper|M1_M2 dir %direction1|degree %degree1|M3_M4 dir %direction2|degree %degree2\"\n    //% stepper.fieldEditor=\"gridpicker\" stepper.fieldOptions.columns=2\n    //% direction1.fieldEditor=\"gridpicker\" direction1.fieldOptions.columns=2\n    //% direction2.fieldEditor=\"gridpicker\" direction2.fieldOptions.columns=2\n    export function stepperDegreeDual_42(stepper: Stepper, direction1: Dir, degree1: number, direction2: Dir, degree2: number): void {\n        if (!initialized) {\n            initPCA9685()\n        }\n        let timeout1 = 0;\n        let timeout2 = 0;\n        let Degree1 = Math.abs(degree1);\n        let Degree22 = Math.abs(degree2);\n\n        if (stepper == 1) {  // 42 stepper\n            if (Degree1 == 0 && Degree22 == 0) {\n                setStepper_42(0x01, direction1 > 0);\n                setStepper_42(0x02, direction2 > 0);\n            } else if ((Degree1 == 0) && (Degree22 > 0)) {\n                timeout1 = (50000 * Degree22) / (360 * 100)\n                setStepper_42(0x01, direction1 > 0);\n                setStepper_42(0x02, direction2 > 0);\n                basic.pause(timeout1);\n                motorStop(3); motorStop(4);\n            } else if ((Degree22 == 0) && (Degree1 > 0)) {\n                timeout1 = (50000 * Degree1) / (360 * 100)\n                setStepper_42(0x01, direction1 > 0);\n                setStepper_42(0x02, direction2 > 0);\n                basic.pause(timeout1);\n                motorStop(1); motorStop(2);\n            } else if ((Degree22 > Degree1)) {\n                timeout1 = (50000 * Degree1) / (360 * 100)\n                timeout2 = (50000 * (Degree22 - Degree1)) / (360 * 100)\n                setStepper_42(0x01, direction1 > 0);\n                setStepper_42(0x02, direction2 > 0);\n                basic.pause(timeout1);\n                motorStop(1); motorStop(2);\n                basic.pause(timeout2);\n                motorStop(3); motorStop(4);\n            } else if ((Degree22 < Degree1)) {\n                timeout1 = (50000 * Degree22) / (360 * 100)\n                timeout2 = (50000 * (Degree1 - Degree22)) / (360 * 100)\n                setStepper_42(0x01, direction1 > 0);\n                setStepper_42(0x02, direction2 > 0);\n                basic.pause(timeout1);\n                motorStop(3); motorStop(4);\n                basic.pause(timeout2);\n                motorStop(1); motorStop(2);\n            }\n        } else if (stepper == 2) {\n            if (Degree1 == 0 && Degree22 == 0) {\n                setStepper_28(0x01, direction1 > 0);\n                setStepper_28(0x02, direction2 > 0);\n            } else if ((Degree1 == 0) && (Degree22 > 0)) {\n                timeout1 = (50000 * Degree22) / (360 * 100)\n                setStepper_28(0x01, direction1 > 0);\n                setStepper_28(0x02, direction2 > 0);\n                basic.pause(timeout1);\n                motorStop(3); motorStop(4);\n            } else if ((Degree22 == 0) && (Degree1 > 0)) {\n                timeout1 = (50000 * Degree1) / (360 * 100)\n                setStepper_28(0x01, direction1 > 0);\n                setStepper_28(0x02, direction2 > 0);\n                basic.pause(timeout1);\n                motorStop(1); motorStop(2);\n            } else if ((Degree22 > Degree1)) {\n                timeout1 = (50000 * Degree1) / (360 * 100)\n                timeout2 = (50000 * (Degree22 - Degree1)) / (360 * 100)\n                setStepper_28(0x01, direction1 > 0);\n                setStepper_28(0x02, direction2 > 0);\n                basic.pause(timeout1);\n                motorStop(1); motorStop(2);\n                basic.pause(timeout2);\n                motorStop(3); motorStop(4);\n            } else if ((Degree22 < Degree1)) {\n                timeout1 = (50000 * Degree22) / (360 * 100)\n                timeout2 = (50000 * (Degree1 - Degree22)) / (360 * 100)\n                setStepper_28(0x01, direction1 > 0);\n                setStepper_28(0x02, direction2 > 0);\n                basic.pause(timeout1);\n                motorStop(3); motorStop(4);\n                basic.pause(timeout2);\n                motorStop(1); motorStop(2);\n            }\n        } else {\n            //\n        }\n    }\n\n    /**\n\t * Two parallel stepper motors are executed simultaneously(Turn).\n    */\n    //% weight=30\n    //% blockId=motor_stepperTurnDual_42 block=\"Dual Stepper %stepper|M1_M2 dir %direction1|trun %trun1|M3_M4 dir %direction2|trun %trun2\"\n    //% stepper.fieldEditor=\"gridpicker\" stepper.fieldOptions.columns=2\n    //% direction1.fieldEditor=\"gridpicker\" direction1.fieldOptions.columns=2\n    //% direction2.fieldEditor=\"gridpicker\" direction2.fieldOptions.columns=2\n    export function stepperTurnDual_42(stepper: Stepper, direction1: Dir, trun1: number, direction2: Dir, trun2: number): void {\n        if ((trun1 == 0) && (trun2 == 0)) {\n            return;\n        }\n        let degree1 = trun1 * 360;\n        let degree22 = trun2 * 360;\n\n        if (stepper == 1) {\n            stepperDegreeDual_42(stepper, direction1, degree1, direction2, degree22);\n        } else if (stepper == 2) {\n            stepperDegreeDual_42(stepper, direction1, degree1, direction2, degree22);\n        } else {\n\n        }\n\n    }\n\n    /**\n\t * Stop the dc motor.\n    */\n    //% weight=20\n    //% blockId=motor_motorStop block=\"Motor stop|%index\"\n    //% index.fieldEditor=\"gridpicker\" index.fieldOptions.columns=2 \n    export function motorStop(index: Motors) {\n        setPwm((4 - index) * 2, 0, 0);\n        setPwm((4 - index) * 2 + 1, 0, 0);\n    }\n\n    /**\n\t * Stop all motors\n    */\n    //% weight=10\n    //% blockId=motor_motorStopAll block=\"Motor Stop All\"\n    export function motorStopAll(): void {\n        for (let idx = 1; idx <= 4; idx++) {\n            motorStop(idx);\n        }\n    }\n}\nbasic.showLeds(`\n    # # # # .\n    . . . . .\n    . . . . .\n    . . . . .\n    . . . . .\n    `)\n","pxt.json":"{\n    \"name\": \"main\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"20210813Github\": \"github:joeada/20210813github#b29a5447785ab8eb64d2dc54e6666d6f4a930468\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"targetVersions\": {\n        \"branch\": \"v4.0.11\",\n        \"tag\": \"v4.0.11\",\n        \"commits\": \"https://github.com/microsoft/pxt-microbit/commits/2b9dd6f9b1588b4ad95673b458b3a6eb156bfbd7\",\n        \"target\": \"4.0.11\",\n        \"pxt\": \"7.0.8\"\n    },\n    \"preferredEditor\": \"blocksprj\"\n}\n"}